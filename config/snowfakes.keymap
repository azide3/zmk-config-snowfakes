// SPDX-License-Identifier: MIT
// Copyright 2025 saikocat (@saikocat)

#include <behaviors/rgbled_widget.dtsi>

#define ZMK_POINTING_DEFAULT_MOVE_VAL 1500
#define ZMK_POINTING_DEFAULT_SCRL_VAL 20

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <25>;
            key-positions = <1 10>;
            bindings = <&kp ESC>;
        };

        combo_bt_setting {
            timeout-ms = <50>;
            bindings = <&to 3>;
            key-positions = <32 31 24>;
        };

        combo_playpause {
            timeout-ms = <25>;
            bindings = <&kp C_PP>;
            key-positions = <4 5>;
        };

        combo_bracket_left {
            timeout-ms = <20>;
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <7 6>;
        };

        combo_bracket_right {
            timeout-ms = <20>;
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <7 8>;
        };

        combo_vol_up {
            timeout-ms = <25>;
            bindings = <&kp C_VOLUME_UP>;
            key-positions = <22 23>;
        };

        combo_vol_down {
            timeout-ms = <25>;
            bindings = <&kp C_VOLUME_DOWN>;
            key-positions = <21 20>;
        };

        combo_vol_mute {
            timeout-ms = <25>;
            bindings = <&kp C_MUTE>;
            key-positions = <21 22>;
        };

        combo_plus {
            timeout-ms = <20>;
            bindings = <&kp PLUS>;
            key-positions = <29 19>;
        };

        combo_minus {
            timeout-ms = <20>;
            bindings = <&kp MINUS>;
            key-positions = <19 18>;
        };

        combo_equal {
            timeout-ms = <20>;
            bindings = <&kp EQUAL>;
            key-positions = <29 28>;
        };

        combo_no1 {
            timeout-ms = <35>;
            bindings = <&kp NUMBER_1>;
            key-positions = <34 26>;
        };

        combo_no2 {
            timeout-ms = <35>;
            bindings = <&kp NUMBER_2>;
            key-positions = <34 27>;
        };

        combo_no3 {
            timeout-ms = <35>;
            bindings = <&kp NUMBER_3>;
            key-positions = <34 28>;
        };

        combo_no4 {
            timeout-ms = <35>;
            bindings = <&kp NUMBER_4>;
            key-positions = <34 16>;
        };

        combo_no5 {
            timeout-ms = <35>;
            bindings = <&kp N5>;
            key-positions = <34 17>;
        };

        combo_no6 {
            timeout-ms = <35>;
            bindings = <&kp NUMBER_6>;
            key-positions = <34 18>;
        };

        combo_no7 {
            timeout-ms = <35>;
            bindings = <&kp N7>;
            key-positions = <34 6>;
        };

        combo_no8 {
            timeout-ms = <35>;
            bindings = <&kp N8>;
            key-positions = <34 7>;
        };

        combo_no9 {
            timeout-ms = <35>;
            bindings = <&kp N9>;
            key-positions = <34 8>;
        };

        combo_no0 {
            timeout-ms = <35>;
            bindings = <&kp N0>;
            key-positions = <34 19>;
        };

        combo_paste {
            timeout-ms = <25>;
            bindings = <&kp LG(V)>;
            key-positions = <2 1>;
        };

        combo_copy {
            timeout-ms = <25>;
            bindings = <&kp LG(C)>;
            key-positions = <3 2>;
        };

        combo_track_prev {
            timeout-ms = <25>;
            bindings = <&kp C_PREV>;
            key-positions = <20 21 22>;
        };

        combo_track_next {
            timeout-ms = <25>;
            bindings = <&kp C_NEXT>;
            key-positions = <21 22 23>;
        };

        combo_change_lang {
            timeout-ms = <25>;
            bindings = <&kp LC(SPACE)>;
            key-positions = <13 14 15 16>;
        };

        combo_moom_toggle {
            timeout-ms = <25>;
            bindings = <&kp LA(LC(LG(E)))>;
            key-positions = <1 11>;
        };

        combo_backspace {
            timeout-ms = <35>;
            bindings = <&kp BACKSPACE>;
            key-positions = <20 21 22 23>;
        };

        combo_mouseclick_left {
            timeout-ms = <15>;
            bindings = <&mkp LCLK>;
            key-positions = <3 13>;
        };

        combo_mouseclick_right {
            timeout-ms = <15>;
            bindings = <&mkp RCLK>;
            key-positions = <2 12>;
        };

        combo_mouseclick_middle {
            timeout-ms = <15>;
            bindings = <&mkp MCLK>;
            key-positions = <11 12 13>;
        };

        combo_change_lang_android {
            timeout-ms = <35>;
            bindings = <&kp LG(SPACE)>;
            key-positions = <3 4 5 6>;
        };

        combo_homerow_scroll {
            timeout-ms = <25>;
            bindings = <&kp LG(LC(LA(T)))>;
            key-positions = <8 19>;
        };

        combo_homerow_search {
            timeout-ms = <25>;
            bindings = <&kp LG(LC(LA(W)))>;
            key-positions = <6 16>;
        };

        combo_skmr {
            bindings = <&macro_skmr>;
            key-positions = <31 23 34 26>;
        };
    };

    behaviors {
        gqt: gqt {
            compatible = "zmk,behavior-hold-tap";
            label = "GQT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <180>;
            flavor = "tap-preferred";
        };

        gqt_mkp: gqt_mkp {
            compatible = "zmk,behavior-hold-tap";
            label = "GQT_MKP";
            bindings = <&mkp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <180>;
            flavor = "tap-preferred";
        };
    };

    macros {
        macro_skmr: macro_skmr {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp LS(I) &kp SPACE &kp F &kp E &kp E &kp L &kp SPACE &kp L &kp I &kp K &kp E &kp SPACE &kp W &kp E &kp SPACE &kp H &kp A &kp V &kp E &kp SPACE &kp G &kp O &kp N &kp E &kp SPACE &kp P &kp A &kp S &kp T &kp SPACE &kp S &kp O &kp C &kp I &kp A &kp L &kp SPACE &kp N &kp O &kp R &kp M &kp S &kp SPACE &kp H &kp A &kp H &kp H &kp A &kp A &kp H &kp A &kp H &kp H &kp H>;
            label = "MACRO_SKMR";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        layer_base {
            display-name = "qwerty";
            bindings = <
&gqt TILDE Q  &kp W  &kp E       &kp R       &kp T                 &kp Y                 &kp U                         &kp I                    &kp O                      &gqt SQT P
&kp A         &kp S  &gqt TAB D  &kp F       &kp G                 &gqt LS(LG(H)) H      &gqt LEFT_ALT J               &kp K                    &kp L                      &gqt MINUS SEMI
&kp Z         &kp X  &kp C       &kp V       &gqt LG(B) B          &kp N                 &kp M                         &gqt LEFT_BRACKET COMMA  &gqt RIGHT_BRACKET PERIOD  &gqt BACKSLASH SLASH
                     &mo 1       &kp LSHIFT  &gqt LS(ENTER) ENTER  &gqt LG(SPACE) SPACE  &gqt LG(BACKSPACE) BACKSPACE  &mo 7
            >;
        };

        navi {
            bindings = <
&none           &msc SCRL_UP    &gqt_mkp MB4 LC(LS(TAB))  &gqt_mkp MB5 LC(TAB)  &kp LG(Z)      &msc SCRL_UP    &kp LA(LEFT)  &kp UP_ARROW  &kp LA(RIGHT)  &none
&msc SCRL_DOWN  &kp LEFT_SHIFT  &sk LEFT_CONTROL          &sk LEFT_GUI          &sk LEFT_ALT   &msc SCRL_DOWN  &kp LEFT      &kp DOWN      &kp RIGHT      &none
&to 2           &none           &kp LG(C)                 &kp LG(V)             &kp LG(LS(Z))  &none           &none         &none         &none          &kp LA(LC(LG(R)))
                                &to 0                     &trans                &trans         &trans          &trans        &none
            >;
        };

        mouse {
            bindings = <
&trans          &msc SCRL_UP  &gqt LG(LEFT) LS(LC(TAB))  &gqt LG(RIGHT) LC(TAB)  &none   &msc SCRL_UP    &msc SCRL_LEFT  &mmv MOVE_UP    &msc SCRL_RIGHT  &trans
&msc SCRL_DOWN  &mkp MCLK     &mkp RCLK                  &mkp LCLK               &none   &msc SCRL_DOWN  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &trans
&trans          &trans        &kp LG(C)                  &kp LG(V)               &trans  &trans          &trans          &trans          &trans           &trans
                              &to 0                      &trans                  &trans  &trans          &trans          &trans
            >;
        };

        bt_setting {
            bindings = <
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3   &bt BT_SEL 4  &trans  &trans  &trans  &trans  &trans
&trans        &trans        &trans        &kp LG(SPACE)  &to 4         &trans  &trans  &trans  &trans  &trans
&bt BT_CLR    &trans        &trans        &trans         &trans        &trans  &trans  &trans  &trans  &trans
                            &to 0         &trans         &trans        &trans  &trans  &trans
            >;
        };

        base_android {
            bindings = <
&gqt TILDE Q  &kp W  &kp E         &kp R            &kp T                 &kp Y             &kp U                    &kp I                    &kp O                      &gqt SQT P
&kp A         &kp S  &gqt TAB D    &gqt LEFT_GUI F  &kp G                 &gqt LS(LG(H)) H  &gqt LEFT_GUI J          &kp K                    &kp L                      &gqt MINUS SEMICOLON
&kp Z         &kp X  &gqt LG(C) C  &gqt LG(V) V     &gqt LG(B) B          &kp N             &kp M                    &gqt LEFT_BRACKET COMMA  &gqt RIGHT_BRACKET PERIOD  &gqt BACKSLASH SLASH
                     &mo 5         &kp LSHFT        &gqt LS(ENTER) ENTER  &kp SPACE         &gqt LA(BSPC) BACKSPACE  &to 5
            >;
        };

        nav_android {
            bindings = <
&none           &msc SCRL_UP    &gqt_mkp MB4 LS(LG(TAB))  &gqt_mkp MB5 LG(TAB)  &kp LG(Z)      &kp PAGE_UP    &kp LG(LEFT)    &kp UP    &kp LG(RIGHT)   &none
&msc SCRL_DOWN  &kp LEFT_SHIFT  &sk LCTRL                 &sk LEFT_GUI          &sk LEFT_ALT   &kp PAGE_DOWN  &gqt HOME LEFT  &kp DOWN  &gqt END RIGHT  &none
&to 6           &none           &kp LG(C)                 &kp LG(V)             &kp LS(LG(Z))  &none          &none           &none     &none           &none
                                &to 4                     &kp LSHFT             &trans         &trans         &trans          &none
            >;
        };

        mouse_android {
            bindings = <
&none           &msc SCRL_UP  &gqt K_BACK LS(LG(TAB))  &gqt K_FORWARD LC(LG(TAB))  &msc SCRL_UP    &msc SCRL_UP    &msc SCRL_RIGHT  &mmv MOVE_UP    &msc SCRL_LEFT   &none
&msc SCRL_DOWN  &mkp MCLK     &mkp RCLK                &mkp LCLK                   &msc SCRL_DOWN  &msc SCRL_DOWN  &mmv MOVE_LEFT   &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &none
&none           &none         &kp LG(C)                &kp LG(V)                   &none           &none           &none            &none           &none            &none
                              &to 4                    &trans                      &trans          &trans          &trans           &none
            >;
        };

        aerospace {
            bindings = <
&kp LA(LC(Q))  &kp LA(LC(W))  &kp LA(LC(E))  &kp LA(LC(R))   &kp LA(LC(T))      &msc SCRL_UP                          &msc SCRL_LEFT                      &gqt LC(LG(UP_ARROW)) LC(UP_ARROW)  &msc SCRL_RIGHT                     &gqt LC(SLASH) LC(COMMA)
&kp LA(LC(A))  &kp LA(LC(S))  &kp LA(LC(D))  &kp LA(LC(F))   &kp LA(LC(G))      &msc SCRL_DOWN                        &gqt LC(LG(LEFT)) LC(LEFT_ARROW)    &gqt LC(LG(DOWN)) LC(DOWN)          &gqt LC(LG(RIGHT)) LC(RIGHT)        &gqt LA(LC(N5)) LA(N5)
&none          &none          &none          &kp LA(MINUS)   &kp LA(BACKSLASH)  &gqt LA(LG(LC(LS(F)))) LA(LC(LG(F)))  &gqt LC(LA(NUMBER_1)) LA(NUMBER_1)  &gqt LC(LA(NUMBER_2)) LA(NUMBER_2)  &gqt LA(LC(NUMBER_3)) LA(NUMBER_3)  &gqt LC(LA(NUMBER_4)) LA(NUMBER_4)
                              &mo 1          &kp LEFT_SHIFT  &none              &none                                 &none                               &none
            >;
        };
    };
};

// vim: ft=dts et
